
    checking for similarity one character at a time means a lot of repeated scans. How can long regions of repeated characters be counted without having to scan the same region over and over?
    Watch out for repeated patterns of characters, not just single characters repeated.



/* A BIT OPTIMISED - STILL TLE IN 2 TESTCASES */
    public static int stringSimilarity(String s) {
        int ans=s.length(); //the first suffix is the entire string itself
        char[] arr = s.toCharArray();
        for(int i=1;i<arr.length;i++){
            for(int j=i;j<s.length();j++){
                if(arr[j-i]==arr[j]) ans++;
                else break;
            }
        }
        return ans;
    }
}


/* BRUTE FORCE - TLE */
    public static int stringSimilarity(String s) {
        int ans=0;
        for(int i=0;i<s.length();i++){
            StringBuilder sb = new StringBuilder(s.substring(i));
            int count=0;
            int flag=1;
            for(int j=0;j<sb.length() && flag==1;j++){
                if(sb.charAt(j)==s.charAt(j)) count++;
                else flag=0;
            }
            ans+=count;
        }
        return ans;
    }
}
