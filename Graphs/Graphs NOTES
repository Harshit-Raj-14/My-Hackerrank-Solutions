Nodes: A node, also known as a vertex or point, is a fundamental unit of a graph. In graph theory, nodes are treated as indivisible and featureless objects. 
Edges : Relation, or line connected nodes
Vertex = Nodes

TLE session = https://www.youtube.com/watch?v=BQFvOBJCDXs (eg  :why graphs : manage or show replationship between facebook friends 

Types of graphs:
Directed Grpah (like a one way road, a hierarchy kind, directions matter)
Undirected graph (like a 2 way road, where direction does not matter)

Weighted Graph : each edge has a cost or wieght associated with it, singifying the cost to travel the edge.
Unweighted Graph

Connected Graph - Graph in which there is awlays a path between any two vertex in a graph
Disconnected Graph 

Cyclic graph - graph has a cycle inside it
Acyclic graph - no cycle => IMPORTANT : there is no path that you traverse and reach the same node again

finite graph - > grpah in which number of edges and vertices are limited ( eg  :graph of currencies in world)
Infintie Graph : infinte grpah

Directed Acyclic Graph (DAG) : A directed graph with no cycle
Complete graph - There are n nodes and each node has n-1 edges. Meaning each node is connected to every other node. degree=n-1
simple grpah : there is only one edge between two nodes
multigraph : there are can be more than one edge between two ndoes
trivial graph  :a grpah with no edges and only one vertex
null graph : a graph which has nodes but no edges connecting them.


Common Notation Representation of graph
G={V,E}
V={1,2,3,4,5} => vertices in the graph
E={(1,2),(2,3),(3,4),(4,5),(5,1)} => edges between two nodes in a graph : (1,2) => there is an edge between 1 and 2 


Adjacency : A vertex is said to be adjacent to a node, if there is a vertex connecting the two nodes.
Path : A sequence of edges that allow you to go from one node to another.
Directed graph : (u,v) => is in a particular direction and doesn't mean (v,u) is same as (u,v)
Degree of a node - No of edges connected to that node


ADJACENCY MATRIX
A matrix to represent the edges between nodes.
No of rows = no of columns = no of nodes
The values can represent edge existence, weight or even direction in graph
mat[u][v]=1
mat[v][u]=0 => this is a directed graph, since u,v is not always same as v,u

Note : if you want to add a node in graph you can simply add an extra row and column in adjacency matrix.


## Intitalsising a graph
private int adjMatrix [][];
private int numVertices;  //no of vertices

// Initialize the matrix
public Graph (int numVertices){
  this.numVertices = numVertices;
  adjMatrix = new int[numVertices][numVertices];
}

// Add edges
public void addEdge(int i, int j) {    //(i,j) => row and column no of adjacency matrix
  adjMatrix[i][j] = 1;
  adjMatrix[j][i] = 1;
}
// Remove edges
public void removeEdge (int i, int j) {
  adjMatrix[i][j] = 0;
  adjMatrix[j][i] = 0;
}

// Add vertex
public void addVertex() {
  int[][] newAdjMatrix = new int [numVertices + 1] [numVertices + 1];
  for (int i=0; i < numVertices; i++){
    for (int j=0; j < numVertices; j++){
      newAdjMatrix[i][j] = adjMatrix[i][j];
    }
  }
  adjMatrix = newAdjMatrix;
  numVertices++;
}

// Remove a vertex
public void removeVertex(int v) {
    int newAdjMatrix[][] = new int[numVertices-1][numVertices-1];
    int row = 0, col = 0;
    for (int i = 0; i < numVertices; i++) {
        if (i == v) continue; // Skip the v-th row
        col = 0;
        for (int j = 0; j < numVertices; j++) {
            if (j == v) continue; // Skip the v-th column
            newAdjMatrix[row][col] = adjMatrix[i][j];
            col++;
        }
        row++;
    }
    adjMatrix = newAdjMatrix;
    numVertices--;
}

public static void main(String args[]){
  Graph G = new Graph(4);  //where 4 is number of verticies
  addEdge(1, 2);
  addEdge(1, 4);
  addEdge(1, 3);
  addEdge(2, 3);
  addEdge(4, 3);
  removeEdge(3, 1);
  addVertex();
  removeVertex(4);
}

PROS:
- simple strcture, efficient for dense groups
- quick edge queries
CONS:
- high sapce complexity O(n^2)
- expensive operations, notsuitable for dynamic graphs


ADJACENCY LIST (based on ArrayList/ linked list)(vertex->graph, node->ll)
Graph : 1--2--3--4

Based on above graph we can draw seperate ll for each node showing which other node its connected to:
1 -> 2
2 -> 1 -> 3
3 -> 2 -> 4
4 -> 3

Directed Graph : Graph : 1--2--3--4->1 (directed edge back from 4 to 1)
1 -> 2 -> 4
2 -> 1 -> 3
3 -> 2 -> 4
4 -> 3

Notice that for directed edge, in ll for vertex 1 we have an outgoing edge to 4
But in ll of vertex 4 there is no edge connecting to 1
So, that's how you represent directed graph

For weighted graph, add an extra section of weight in ll node data

Note : when adding a node in tree, you can add an extra ll of that vertex and every joining vertex that is added to that ll, you can add that extra vertex values to those ll's as well

Degree of node -> size of ll

/* CODE */
public class AdjacencyListGraph {
private Map<Integer, List<Integer>> adjacencyList;

public AdjacencyListGraph(){  // Constructor
  this.adjacencyList = new HashMap<>(); 
}

// Add a vertex to the graph
public void addVertex(int vertex) {
  adjacencyList.put(vertex, new LinkedList<>());
}

// Add an edge between two vertices
public void addEdge(int source, int destination) {
  adjacencyList.get(source).add(destination); 
  adjacencyList.get(destination).add(source);
}

// Remove an edge between two vertices
public void removeEdge (int source, int destination) {
  adjacencyList.get(source).remove((Integer) destination);
  adjacencyList.get(destination).remove((Integer) source);
}

// Add a vertex to the graph
public void addVertex(int vertex) {    //O(1)
  adjacencyList.put(vertex, new LinkedList<>());
}

// Remove a vertex from the graph
private void removeVertex(int vertex) {
  adjacencyList.remove(vertex);
  // Remove edges pointing to the removed vertex
  for (List<Integer> neighbors : adjacencyList.values()){ 
    neighbors.remove((Integer) vertex);
  }
}

public static void main(String args[]){
  G = new AdjacencyListGraph(4);
  G.addVertex(1);
  G.addVertex(2);
  G.addVertex(3);
  addEdge (1 2);
  addEdge (1, 3);
  addEdge (2 , 3);
  removeEdge(3, 1);
  addVertex(5);
}

PROS-
- Unlike adjacency matrix where adding and removing vertex were O(n^2) operation, here its just O(1)
- good for sparse graphs
- efficient for dynamic graphs

CONS:
- not good for dense graphs
- extra overhead space storage
- slow to check edges


## GRAPH TRAVERSAL

Depth First Search (DFS)
We need two more helper data strcuture a visited hashset, and a helper stack

Steps:
Start with any vertex and mark it as visited
find all the neighbour of the nodes being visited (traverse the adjacency list)
put all the unvisited above neighbours in stack
pop top node in stack and put them in visited to continue with step 2(so now add the adjacency list elements of that node in stack)

Now we stop traversing when stack becoems empty

/* CODE */
/* ITERATIVE METHOD */
public void DFSIterative(int startVertex) {
  HashSet<Integer> visited = new HashSet<>();
  Stack<Integer> stack = new Stack<>();
  stack.push(startVertex);
  while(!stack.isEmpty()){  //Keep traversing until stack is empty
    int currentVertex = stack.pop();   // Get an element from stack and mark as visited if we haven't visited it already
    if (!visited.contains(currentVertex)){    
      System.out.print(currentVertex + " ");
      visited.add(currentVertex);
      // Add all the unvisited neighbors of the curr vertex to stack
      for (int neighbor : adjacencyList.getOrDefault(currentVertex, Collections.emptyList()))
        if (!visited.contains(neighbor)) stack.push(neighbor);
    }
  }
}

TC - O(V+E) => each node and edge is traversed once
SC - O(V) => space equal to number of vertexes required that will be the maximum space of stack and set

/* RECURSIVE METHOD */
public void DFS(int startVertex) {
  HashSet<Integer> visited = new HashSet<>();
  DFSRecursive(startVertex, visited);
}

private void DFSRecursive(int vertex, HashSet<Integer> visited) {
  visited.add(vertex);    // Add the vertex to visited set
  System.out.print(vertex + " ");
  // Iterate through each neighbor of the vertex
  for (int neighbor : adjacencyList.getOrDefault(vertex, Collections.emptyList()))
    // perform dfs on the vertex, only when it has not been visited till yet
    if (!visited.contains(neighbor)) DFSRecursive(neighbor, visited);
  }
}

Why its called DFS?
Becuase when you visit the first vertex, you take its neighbour, then you again takes the neighbour neighbour as you put them all in stack. So, you see you are going deep. that's why dfs.


BREADTH FIRST SEARCH (BFS)
Uses QUEUE

/* CODE */
/* ITERATIVE */
public void BFSIterative(int startVertex) {
  Set<Integer> visited = new HashSet<>();
  Queue<Integer> queue = new LinkedList<>();
  queue.add(startVertex);
  visited.add(startVertex);
  while (!queue.isEmpty()){   // Keep traversing till the queue is empty
    // Get an element from the queue and mark as visited
    int currentVertex = queue.poll();
    System.out.print(currentVertex + " ");
    // Add all the neighbors to the queue
    for (int neighbor : adjacencyList.getOrDefault(currentVertex, Collections.emptyList()))
      if (!visited.contains(neighbor)){
        queue.add(neighbor);
        visited.add(neighbor);
      }
  }
}


TOPOLOGICAL SORT
Kahns algorithm
find indegree
Add all nodes with an indegree of 0 to the queue.
While the queue is not empty:
    Deque the first node from the queue and add it to the topological sort.
    Decrement the indegree of each neighbor of the node. If this results in a neighbor having an indegree of 0, add it to the queue.
    We have fully processed node 1, so now repeat the process of dequeuing and decrementing indegrees for the next node in the queue until the queue is empty.
Return the topological order.

SAME AS BFS
The complexity of this algorithm is the same of BFS.
