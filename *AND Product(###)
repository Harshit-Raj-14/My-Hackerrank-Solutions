/* O(1*Q) SOLUTION */

LOGIC--XOR a and b. Find its next power of 2. Subtract 1. Flip its bits and AND with either a or b.
a & ~(nextpowerof2(a^b)-1)
That's it.

Example---
Let's say a and b are:
a = 26 = 011010
b = 40 = 101000
The leftmost 1 bit of b is to the left of the leftmost 1 bit of a. 
So, there is a power of 2 that lies between a and b - namely, 32 (100000) which when ANDed with anything before it will result in 0. 
This will make the final result 0.

However, if a and b were
a = 42 = 101010
b = 57 = 111001
their leftmost 1 bits are aligned (are in the same bit position). If we temporarily ignore this 1 bit in both, we have:
a = 01010
b = 11001
Again there exists a power of 2, namely 16 (10000) that lies between these two sub-values that will eventually zero out the AND product in these bits.
The ANDproduct of the range [101010, 111001] is 100000. In other words, ANDing the range [101010, 111001] is equivalent to preserving 
the ALL leftmost ALIGNED bits (both 1s and 0s) and zeroing out all bits starting with the first non-aligned bit.
To zero-out all bits starting with the first non-aligned bit, we need to AND these bits with 0s.

To do so, we first a XOR b to get 10011. These bits will have to be zeroed-out. Next, we get the smallest power of 2 larger than this XOR value which happens to be 100000. 
Subtracting 1, we get 11111, and then finally inverting the bits, we get 11111111111111111111111111100000 (32-bit).

Now, this value ANDed with either A or B will produce the final AND product.



/* IMPROVED TC-O(log(max(a, b))*Q) */
    public static long andProduct(long a, long b) {
        if(a==0) return 0;
        long moved=0;
        while(a!=b){
            a>>=1;
            b>>=1;
            moved++;
        }
        return a<<moved;  //return b<<moved;
    }

LOGIC ---
eg: a=10, b=14
a=1010 and b=1110
What we are aiming to find is the number of common set bit arrangement or prefixes. We do this by dividing by two or by checking by rightshifting the bit.
10>>1 => 5=101
14>>1 => 7=111
Since, 5!=7
5>>1 => 2=10
7>>1 => 3=11
2!=3
2>>1 => 1
3>>1 => 1
therefore 1 is the common prefix for all values in range [10,14]. 
Number of iterations we took = 3 = moved
We can left shift the remaning prefix(a) by the moved amount to get the 
Note: a==b==prefix




/* BRUTE FORCE TLE TC-O(N*Q) */
    public static long andProduct(long a, long b) {
        long ans=a;
        for(long i=a+1;i<=b;i++){
            ans&=i;
        }
        return ans;
    }

LOGIC ---
Very difficult time complexity becuase we need to do O(n) over q queries.
