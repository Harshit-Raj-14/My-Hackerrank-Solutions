public static int equal(List<Integer> arr) {
    int min=Integer.MAX_VALUE;
    for(int i=0;i<arr.size();i++){
        min=Math.min(min, arr.get(i));
    }
    int ans=Integer.MAX_VALUE;
    for(int i=0;i<5;i++){   //min to min-4
    int ops=0;
        for(int j=0;j<arr.size();j++){
            int dif=arr.get(j)-min;
            ops+= dif/5 + (dif%5)/2 + ((dif%5)%2)/1;    //once divided by 5, let's divide the remainder after division by 2 and so on
        }
        ans=Math.min(ans, ops);
        min--;  //move to next possiblity of min
    }
    return ans;
}

/*
LOGIC---
Giving chocolates to everyone except one is the same as taking chocolate from that one employee.

It is difficult to think who to give chocolate when so many employees.
rather its easy to just decide who not to give cohocolate since we focus on one prson.

It will be easier to tweak one value in array rather than changing all the values.

eg: [4,4,4,6,4] => rather than thinking how to make each of them equal.
Why not just bring 6 to the same level of 4 by taking two choclolates away from him

eg: [2,2,3,7]
ops1: give 5 to everyone except 4 => [7,7,8,7]
ops2: give 1 to everyone except 3 => [8.8.8.8]
ans => minimum 2 steps

Now think of this problem in above explaiend terms:
Reverse the operations---
take 5 chocolates from 4 => [2,2,3,2]
take 1 chocolate from 3 => [2,2,2,2]

Infact, we can say that we are trying to attain a minimum level to bring the chocolate distribution equal.

But note that this minimal value, is not necessary the minimum of our array.
eg: [2,6,6,6]
ops1: take 2 chocolates from 2 => [2,4,6,6]
if you keep this up : [2,2,2,2]
but total operation made = 2*3=6

But there is a more optimal solution
ops1: take 5 chocolates from 2 => [2,1,6,6]
ops2: take 5  chocolates from 3 => [2,1,1,6]
ops3: take 5  chocolates from 4 => [2,1,1,1]
ops4: take 1  chocolates from 1 => [1,1,1,1]
total operations made = 4 

Infact the minimal state we want to reach becuase of the operations will vary from (minimum of aray)min to min-4.
Reason: The range comes from the fact that you can either give 1, 2 or 5 chocolates. 
That's why you have to check all the possibilities in that range. 
We do not go past "min-4" because that will take 5 operations which is same as a single operation of giving 5 chocolates at once.
If you reach ‘min-5’, then you will reach the same scenario you started with.
Try to do a dry run and take away 5 chocolates, you will find yourself in a recurrence.

Algorithm---
Find the minimum in array. 
Explore every minimum possiblity to reach min, min-1, min-2, min-3, min-4.
Use 1,2,5 removal ops at each index to reach the minimal level.

Note : if she could have distributed 8 chocolate we would have checked till min-7.
*/
