/* O(logn) SOLUTION */
    public static long sumXor(long n) {
        int unsetbits=0;
        while(n>0){
            if((n&1)==0) unsetbits++;
            n=n>>1;
        }
        return (long)Math.pow(2,unsetbits);
    }

LOGIC---
(a+b) = (a^b) + 2*(a&b)
that means, if(a&b)==0, then we have : (a+b)=a^b=>{half adder implementation}
Now, our problem reduces to findign count of all possible values of 0<=x<=n such that n&x=0.
To find count of such painrs => we need to unset all set bits of n.
If the kth bit is set at a particular position in n, kth bit in x must be 0 always, else kth bit of x can be 0 or 1.
Now its permutation and combination.
Let's say our n is-> 0110111000
So, all we need to make x something like => _00_ _000_ _ _
And now to fill the boxes we have two chocies that is 0 or 1. => 2 chocies
So, total permutations of x can be => 2^(32-count of set bits in n) => becuase only at (32-count of set bits in x) will be the place where we ahve the chocie otherwise we can only put 0.
SOLUTION : In a way, ans=2^(unset bits in n)

Approach : find no of unset bits. then 2^unsetbits)
Note : Math.pow() is double so typecast to int.



/* O(n) TLE */
    public static long sumXor(long n) {
        long count=0;
        for(long x=0;x<=n;x++){
            if(n+x==(n^x)) count++;
        }
        return count;
    }
