/* ACCEPTED SOLUTION */
    public static List<Integer> cutTheSticks(List<Integer> arr) {
        ArrayList<Integer> list = new ArrayList<>();
        Collections.sort(arr);
        //int sticks=arr.size();
        ArrayList<Integer> ans = new ArrayList<>();
        while(arr.size()!=0){
            ans.add(arr.size());  //adding the sticks remaning after removing 0 size sticks
            int min=arr.get(0);
            for(int i=0;i<arr.size();i++){
                arr.set(i, arr.get(i)-min);  
            }
            for(int i=0;i<arr.size();i++){  //removing all zeroes
                if(arr.get(i)==0){
                    arr.remove(i);
                    i--;   //need to recheck if again 0 comes at i when previous deleted
                }
            }
        }
        return ans;
    }

LOGIC ---
Sort the array. the shortest stick comes in front.
make it min
subtract each elemtn in array with it
remove all the 0's to get remaining stick
put the numbe rof remaning sticks in ans list.


/* ELEGANT CODE */
    public static List<Integer> cutTheSticks(List<Integer> arr) {
        ArrayList<Integer> list = new ArrayList<>();
        Collections.sort(arr);
        //int sticks=arr.size();
        ArrayList<Integer> ans = new ArrayList<>();
        while(arr.size()!=0){
            ans.add(arr.size());  //adding the sticks remaning after removing 0 size sticks
            int min=arr.get(0);
            for(int i=0;i<arr.size();i++){  //removing all zeroes
                if(arr.get(i)-min==0){
                    arr.remove(i);
                    i--;   //need to recheck if again 0 comes at i when previous deleted
                }
            }
        }
        return ans;
    }

LOGIC ---
this time instead of updating the arr we are directly rmeovign the elements that became zero

/* VERY WRONG THING YOU DID IN THIS CODE */
    public static List<Integer> cutTheSticks(List<Integer> arr) {
        ArrayList<Integer> list = new ArrayList<>();
        Collections.sort(arr);
        //int sticks=arr.size();
        ArrayList<Integer> ans = new ArrayList<>();
        while(arr.size()!=0){
            ans.add(arr.size());    //adding the sticks remaning after removing 0 size sticks
            for(int i=0;i<arr.size();i++){
                arr.set(i, arr.get(i)-arr.get(0));  //sine smallest stick is now in front
            }
            for(int i=0;i<arr.size();i++){  //removing all zeroes
                if(arr.get(i)==0){
                    arr.remove(i);
                    //i--;   //need to recheck if again 0 comes at i when previous deleted
                }
            }
        }
        return ans;
    }


LOGIC---
The above code won't work becuase everytime you are subtracting --- arr.get(i)-arr.get(0)
But wouldn't the first eleemnt itself get 0 in the first iteration, so the rest of the eleemnts are then not affected
Just give it a simple fix by first fidnign a minimum. Sinc eyou have already sort the array it will be the first elemtn but store it seperately and then use it.
