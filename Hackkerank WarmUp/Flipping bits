/* USING BIT MANIPULATION */
public static long flippingBits(long n) {
        long ans=0;
        for(int i=0;i<32;i++){
            int bit=(int)n&1;    //getting the lsb or last bit of the number
            if(bit==0) ans+=1*Math.pow(2,i);    //its like we are considering 0 flipped to 1 and doing calculation
            n=n>>1;    //right shifting to get the next bit
        }
        return ans;
    }



/* USING STRING */
String result = Long.toBinaryString( n & 0xffffffffL | 0x100000000L ).substring(1);
 StringBuilder sb = new StringBuilder(result);
        
 for(int i=0;i<sb.length();i++){
 char ch=sb.charAt(i);
 if(ch=='0'){
 sb.setCharAt(i, '1');
 }
 else{
 sb.setCharAt(i, '0');
 }
 }
 String str=sb.toString();
 long dec=Long.parseLong(str,2);
 return dec;


/* USING XOR */
public static long flippingBits(long n) {
    long max = (1L << 32) -1;
    
    long flipped = n ^ max;
    
    return flipped;
}
