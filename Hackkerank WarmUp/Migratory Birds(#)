/* O(n) SOLUTION */
    public static int migratoryBirds(List<Integer> arr) {
        int count[] = new int[6];
        for(int i=0;i<arr.size();i++){
            count[arr.get(i)]++;
        }
        int type=1;
        for(int i=0;i<count.length;i++){
            if(count[type]<count[i]) type=i;
        }
        return type;
    }

LOGIC --- THIS IS THE EASIEST SOLUTION ON ENTIRE HACKERRANK
Given number of types is not greater than 5 in constraints
So, size of count array is 5. count[6] size.
Now in second for loop we will only move to the next type only if it exceeds becuase we will have to return the lesser of the type is max count is same for more than one.



/* O(nlogn) ACCEPTED SOLUTION USING SORTING */
public static int migratoryBirds(List<Integer> arr) {
        Collections.sort(arr);
        HashMap<Integer, Integer> map=new HashMap<>();
        for(int i=0;i<arr.size();i++){
            if(map.containsKey(arr.get(i))) map.put(arr.get(i), map.get(arr.get(i))+1);
            else map.put(arr.get(i),1);
        }
        int max=0;
        for(int i=0;i<arr.size();i++){
            max=Math.max(max, map.get(arr.get(i)));
        }
        for(int i=0;i<arr.size();i++){
            if(map.get(arr.get(i))==max) return arr.get(i);
        }
        return -1;
    }


LOGIC ---
We need to sort first becuase
Note we are asked to pick the smaller of the type so we will need to sort the array in case where ---[5,5,3,3,1,2] 
if we worked with the first instance would have returned 5 as ans
        
