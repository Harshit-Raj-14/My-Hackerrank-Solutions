SQL is a database query language designed for the retrieval and management of data in a relational databases like MySQL, MS Access, SQL Server, Oracle, Sybase, Informix, Postgres etc. 
SQL stands for Structured Query Language. SQL was developed in the 1970s by IBM Computer Scientists.

SQL is not a database management system, but it is a query language which is used to store and retrieve the data from a database or in simple words SQL is a language that communicates with databases.

A file with . sql extension is a Structured Query Language (SQL) file.
ACID -> 
CRUD (Create, Read, Update, and Delete)
-- is used to comment SQL queries.

Query all attributes => Query all columns => SELECT * FROM db_name.table_name;

You can rename a table or a column in a database temporarily by giving them another pseudo name. This pseudo name is known as Alias. 
The use of aliases is to address a specific table or a column in an SQL statement without changing their original name in the database. Aliases are created with the AS keyword.

two types of SQL queries: select and action queries. 
The first ones are used to retrieve the necessary data (this also includes limiting, grouping, ordering the data, extracting the data from multiple tables, etc.), 
while the second ones are used to create, add, delete, update, rename the data, etc.

Types of SQL commands
Data Definition Language (DDL) => CREATE, ALTER, DROP, TRUNCATE => applied to database objects like tables, views
Data Manipulation Language (DML) => SELECT, INSERT, UPDATE, DELETE => applied to records in a table
Data Control Language (DCL) => GRANT, REVOKE => access privilege to users
Data Query Language (DQL) => SELECT
Transaction Control Language (TCL) => COMMIT, SET TRANSACTION, ROLLBACK, and SAVEPOINT

The SQL TRUNCATE TABLE command is used to empty a table.

DROP command in SQL deletes entire database objects and their data, whereas the DELETE command removes specific rows from the table (specified by the WHERE clause).

What is a constraint, and why use constraints?
A set of conditions defining the type of data that can be input into each column of a table. Constraints ensure data integrity in a table and block undesired actions.

What SQL constraints do you know?
    DEFAULT – provides a default value for a column.
    UNIQUE – allows only unique values.
    NOT NULL – allows only non-null values.
    PRIMARY KEY – allows only unique and strictly non-null values (NOT NULL and UNIQUE).
    FOREIGN KEY – provides shared keys between two and more tables.


/* NESTING SELECT QUERIES */
SELECT ROUND(LONG_W,4) FROM STATION WHERE LAT_N=(SELECT MAX(LAT_N) FROM STATION WHERE  LAT_N<137.2345);
//Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 4 decimal places.



SOME SYNTAX COMMANDS:

SELECT DISTINCT(column_name) FROM table_name;

/* SQL WHERE function */
SELECT * FROM CUSTOMERS WHERE NAME = 'Ramesh';
SELECT * from CUSTOMERS WHERE NAME IN ('Khilan', 'Hardik', 'Muffy');    //WHERE Clause with IN Operator
SELECT * from CUSTOMERS WHERE AGE NOT IN (25, 23, 22);    //WHERE Clause with NOT IN Operator
SELECT * FROM CUSTOMERS WHERE NAME LIKE 'K___%';    //WHERE Clause with LIKE Operator => Syntax: WHERE column_name LIKE pattern; => The WHERE clause with LIKE operator allows us to filter rows that matches a specific pattern. This specific pattern is represented by wildcards (such as %, _, [] etc).
//the query would display all the records where the name starts with K and is at least 4 characters in length

SELECT * FROM CUSTOMERS WHERE (AGE = 25 OR salary < 4500) AND (name = 'Komal' OR name = 'Kaushik');    //WHERE Clause with AND, OR Operators

PATTERN MATCHING => Match words strign patterns => LIKE command

/* SQL SUM() function */
Syntax:
SELECT SUM(column_name) as give_a_new_table_name_to_this_sum FROM table_name;

SELECT SUM(SALARY) as summation from CUSTOMERS;
Output
+-----------+
| summation |
+-----------+
| 35000.00  |
+-----------+

Now, suppose based on the above table we want to calculate the summation of distinct (unique) age of the customers
SELECT SUM(DISTINCT AGE) as summation from CUSTOMERS;

SELECT SUM(Salary) AS summation FROM CUSTOMERS WHERE AGE > 24;    //the summation of the salary of all customers whose age is greater than 24


SELECT AGE, SUM(SALARY) as sal_sum from CUSTOMERS GROUP BY AGE HAVING SUM(SALARY)> 5000;
//query returns the age of all the customers having salary greater than 5000. Since there are two customers with same age, one of whose salary is greater than 5000, so their salary is summed up


/* SQL ROUND() function */
Syntax: SELECT ROUND(column_name, your_scale) FROM table_name;    //your_scale->desired scale for rounding

QUERY-> following two values from the STATION table: The sum of all values in LAT_N rounded to a scale of 2 decimal places. The sum of all values in LONG_W rounded to a scale of 2 decimal places.
SELECT 
ROUND(SUM(LAT_N),2) as lat, 
ROUND(SUM(LONG_W),2) as lon 
FROM STATION;

Note : if you want to round to nearest integer just make the scale 0.



/* SQL - COUNT Function */
Syntax: SELECT COUNT(column_name) FROM table_name;     //ounting the number of records

SELECT COUNT(*) FROM employee_tbl ;
+----------+
| COUNT(*) |
+----------+
|        7 |
+----------+

SELECT (COUNT(CITY) - COUNT(DISTINCT(CITY))) FROM STATION;  // difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table. 



/* SQL - ORDER BY Clause */
syntax - SELECT column_name FROM table_name ORDER BY table_name ASC/DSC;    //SQL ORDER BY clause is used to sort the data in either ascending or descending order

Note: WHERE function if you are using any condition comes before order by.
Logic--- first you find the column data using condtion, then only you sort all of them

/* SQL - MAX Function */
Syntax: SELECT MAX(column_name) -> FROM table_name;


/* SQL LENGTH FUNCTION */
Syntax: SELECT LENGTH(column_name) as new_clumn_name_you_want FROM table_name;
SELECT LENGTH(CITY) as city_length FROM STATION;    //print length of all the data in that column works for all data types

/* SQL - SUBSTRING() Function */
SELECT SUBSTRING('Hello World', 2, 5) AS NEW_STRING;
+------------+
| NEW_STRING |
+------------+
| ello       |
+------------+

/* SQL - CONCAT Function */
Syntax: CONCAT(string1, string2, ...., string_n)
SELECT CONCAT('SQL', ' ', 'is', ' ', 'fun!'); 



/* SQL Server LEFT() Function */
The LEFT() function extracts a number of characters from a string (starting from left).
LEFT(string, number_of_chars)

Extract 5 characters from the text in the "CustomerName" column (starting from left):
SELECT LEFT(CustomerName, 5) AS ExtractString
FROM Customers; 


/* SQL REPLACE() Function */
The REPLACE() function replaces all occurrences of a substring within a string, with a new substring.
Syntax: REPLACE(string, old_string, new_string)
SELECT REPLACE('SQL Tutorial', 'SQL', 'HTML'); 


/* SQL - Group By Clause */
to arrange identical data into groups
SELECT AGE, COUNT(Name) FROM CUSTOMERS GROUP BY AGE;


/* The SQL HAVING Clause */
The SQL HAVING clause is similar to the WHERE clause; both are used to filter rows in a table based on specified criteria. 
However, the HAVING clause is used to filter grouped rows instead of single rows. 
These rows are grouped together by the GROUP BY clause, so, the HAVING clause must always be followed by the GROUP BY clause.

Here's the order positioning:
SELECT
FROM
WHERE
GROUP BY
HAVING
ORDER BY

SELECT ADDRESS, AGE, MIN(SALARY) AS MIN_SUM FROM CUSTOMERS GROUP BY ADDRESS, AGE HAVING AGE > 25;
//we are grouping the records of the CUSTOMERS table based on the columns ADDRESS and AGE and filtering the groups where the AGE value is less than 25.



/* SQL Server ABS() Function */
SELECT Abs(-243.5) AS AbsNum; 


/* SQL Server SQUARE() Function */ => don't use this not a standard function, instead use POWER function
SELECT SQUARE(64); 


/* SQL Server SQRT() Function */
SELECT SQRT(64); 

/* SQL Server POWER() Function */
SELECT POWER(4, 2); 
//16


/* SQL CASE Statement */
The CASE statement works like a simplified IF-THEN-ELSE statement
Syntax: 
CASE
   WHEN condition1 THEN statement1,
   WHEN condition2 THEN statement2,
   WHEN condition THEN statementN
   ELSE result
END;


SELECT NAME, AGE,
CASE 
WHEN AGE > 30 THEN 'Gen X'
WHEN AGE > 25 THEN 'Gen Y'
WHEN AGE > 22 THEN 'Gen Z'
ELSE 'Gen Alpha' 
END AS Generation
FROM CUSTOMERS;

The output produced is as follows −
NAME 	AGE 	Generation
Ramesh 	32 	    Gen X
Khilan 	25 	    Gen Z
Hardik 	27 	    Gen Y
Komal 	22 	    Gen Alpha

/* SQL - BETWEEN Operator */
SELECT * FROM CUSTOMERS WHERE AGE BETWEEN 20 AND 25;
SELECT * FROM CUSTOMERS WHERE NAME BETWEEN 'A' AND 'L'; 



/* The SQL UNION Operator */
The SQL UNION operator is used to combine data from multiple tables by eliminating duplicate rows (if any).
To use the UNION operator on multiple tables, all these tables must be union compatible. And they are said to be union compatible if and only if they meet the following criteria −
    The same number of columns selected with the same datatype.
    These columns must also be in the same order.
    They need not have same number of rows.
Syntax:
SELECT column1 , column2
FROM table1  
[WHERE condition]
UNION
SELECT column1, column2 
FROM table2
[WHERE condition];

SELECT ID, SALARY FROM CUSTOMERS WHERE ID > 5
UNION
SELECT CUSTOMER_ID, AMOUNT FROM ORDERS WHERE CUSTOMER_ID > 2;
// In the following query, we are retrieving the id's of the customers where id is greater than 5 and 2 from the 'CUSTOMERS' and 'ORDERS' tables respectively 


What is the difference Between UNION and UNION ALL?
UNION ALL is also an operator/clause in SQL, that is used to combine multiple tables into one table. However, this operator also preserves the duplicate rows in the resultant tables unlike UNION.
eg: As we can see in the tables above, Kohli played 234 matches internationally and 234 matches nationally. Even though the data in these columns is the same, they are all separate matches. 
There is a need to include both rows in the resultant table displaying the total matches played by a player. So, we use the UNION ALL operator in such cases.
Syntax: SELECT * FROM table1
UNION ALL
SELECT * FROM table2;

Hence,
UNION and UNION ALL are both SQL set operations that combine the result sets of two or more SELECT statements. However, there is a key difference between them:
UNION:
Removes duplicate rows from the combined result set.
Only distinct (unique) rows are included in the final result.
UNION ALL:
Retains all rows from the combined result set, including duplicates.
Does not eliminate duplicate rows, resulting in potentially faster performance compared to UNION.


/* The SQL INTERSECT Operator */
SELECT NAME, AGE, HOBBY FROM STUDENTS_HOBBY
INTERSECT 
SELECT NAME, AGE, HOBBY FROM STUDENTS;

/* The SQL EXCEPT Operator */
The EXCEPT operator in SQL is used to retrieve all the unique records from the left operand (query), except the records that are present in the result set of the right operand (query).
Its opposite of intersect something like A-B.


/* SQL JOIN */
The SQL Join clause is used to combine data from two or more tables in a database.
When the related data is stored across multiple tables, joins help you to retrieve records combining the fields from these tables using their foreign keys.
Syntax:
SELECT column_name(s)
FROM table1
JOIN table2;

Example :
SELECT ID, NAME, AGE, AMOUNT 
FROM CUSTOMERS 
JOIN ORDERS 
ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;

SQL - Inner Join
The SQL Inner Join is a type of join that combines multiple tables by retrieving records that have matching values in both tables (in the common column).
compares each row of the first table with each row of the second table, to find all pairs of rows that satisfy the join-predicate. 
When the join-predicate is satisfied, the column values from both tables are combined into a new table.
The Inner Join is also referred as Equijoin. 
It is the default join; i.e., even if the "Join"keyword is used instead of "Inner Join", tables are joined using matching records of common columns.
SYNTAX:
SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;

Example:
SELECT ID, NAME, DATE, AMOUNT FROM CUSTOMERS
INNER JOIN ORDERS
ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID
WHERE ORDERS.AMOUNT > 2000.00;

You can also inner join multiple tables.



Outer Join
An Outer Join retrieves all the records in two tables even if there is no counterpart row of one table in another table, unlike Inner Join. 
Outer Join is used to join multiple database tables into a combined result-set, that includes all the records, even if they don't satisfy the join condition. 
NULL values are displayed against these records where the join condition is not met.
Outer join is further divided into three subtypes - Left Join, Right Join and Full Join.
Following are the different types of outer Joins −
    LEFT JOIN − returns all rows from the left table, even if there are no matches in the right table.
    RIGHT JOIN − returns all rows from the right table, even if there are no matches in the left table.
    FULL JOIN − returns rows when there is a match in one of the tables.

Other Joins
In addition to these there are two more joins −
SELF JOIN − is used to join a table to itself as if the table were two tables, temporarily renaming at least one table in the SQL statement.
Self Join is a type of inner join, which is performed in cases where the comparison between two columns of a same table is required; probably to establish a relationship between them. 
In other words, a table is joined with itself when it contains both Foreign Key and Primary Key in it.
Unlike queries of other joins, we use WHERE clause to specify the condition for the table to combine with itself; instead of the ON clause.

Syntax:
SELECT column_name(s)
FROM table1 a, table1 b
WHERE a.common_field = b.common_field;

SELECT  a.ID, b.NAME as EARNS_HIGHER, a.NAME 
as EARNS_LESS, a.SALARY as LOWER_SALARY
FROM CUSTOMERS a, CUSTOMERS b
WHERE a.SALARY < b.SALARY
ORDER BY a.SALARY;


CROSS Join − returns the Cartesian product of the sets of records from the two or more joined tables. 
That means, this join will combine each row of the first table with each row of second table (i.e. permutations).


EXAMPLES:
SELECT ID, NAME, DATE, AMOUNT FROM CUSTOMERS
RIGHT JOIN ORDERS
ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID
WHERE ORDERS.AMOUNT > 1000.00;




The main difference between the Left Join and Right Join can be observed in the way tables are joined.
They are both types of Outer Joins; that is, they retain unmatched rows in one table and discard the unmatched rows of another. 
Left Join preserves the unmatched rows of left table while Right join preserves the unmatched rows of right table.
















/* SQL CODE - FOR TYPE OF TRIANGLE */
SELECT
    CASE
        WHEN A+B<=C OR A+C<=B OR B+C<=A THEN 'Not A Triangle'
        WHEN A=B AND B=C AND C=A THEN 'Equilateral'
        WHEN A=B OR B=C OR A=C THEN 'Isosceles'
        ELSE 'Scalene'
    END
as triangle_type
FROM TRIANGLES;


/* TOP EARNERS */
SELECT MAX(SALARY * MONTHS), COUNT(NAME) FROM EMPLOYEE WHERE SALARY * MONTHS = (SELECT MAX(SALARY * MONTHS) FROM EMPLOYEE);
//Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings.


/* Give the output of full Name (Given First name and Surname) with some condition. */
SELECT CONCAT(first_name, ' ', surname) AS full_name
FROM users
WHERE /* Your condition goes here */;

/* remove duplicate rows from a table without a Distinct Keyword */
//USING GROUP BY
SELECT FirstName, LastName, MobileNo
FROM  CUSTOMER
GROUP BY FirstName, LastName, MobileNo;


//USING INNER JOIN
SELECT a.department_id
FROM employees a
INNER JOIN employees b ON a.department_id = b.department_id
WHERE a.employee_id > b.employee_id;



/* FIND MODE */
SELECT column_name, COUNT(column_name) AS frequency
FROM table_name
GROUP BY column_name
ORDER BY frequency DESC
LIMIT 1;


/* How to find Nth highest salary from a table? => retrieve the sixth highest salary from the Employee table */ 
//USING LIMIT WAY 1
select * from Employee ORDER BY salary DESC limit 5,1; 
//LIMIT 5,1 means "skip the first 5 records and return the next one."

//USING LIMIT WAY 2
select * from ((select * from Employee 
       ORDER BY `sal` DESC limit 6 ) AS T) 
       ORDER BY T.`sal` ASC limit 1;

//USING LIMIT WAY 3
SELECT MIN(sal) FROM Employee WHERE sal IN (
  SELECT DISTINCT sal
  FROM Employee
  ORDER BY sal DESC
  LIMIT 6
);

//USING DENSE_RANK()
Using DENSE_RANK
SELECT * FROM (
  SELECT emp_name, emp_salary, DENSE_RANK() OVER (ORDER BY emp_salary DESC) AS r
  FROM emp
) AS subquery
WHERE r = 6;

    DENSE_RANK computes the rank of a row in an ordered group of rows and returns the rank as a NUMBER. The ranks are consecutive integers beginning with 1.
    This function accepts arguments as any numeric data type and returns NUMBER.
    As an analytic function, DENSE_RANK computes the rank of each row returned from a query with respect to the other rows, based on the values of the value_exprs in the order_by_clause.
    In the above query, the rank is returned based on the sal of the employee table. In the case of a tie, it assigns equal rank to all the rows.  



// USING DATEDIFF
SELECT DATEDIFF(year, '2017/08/25', '2011/08/25') AS DateDiff; 



//CREATING TABLE
CREATE TABLE Students (
    StudentID INT PRIMARY KEY,
    StudentName VARCHAR(100) NOT NULL,
    DateOfBirth DATE,
    Email VARCHAR(255) UNIQUE
);
