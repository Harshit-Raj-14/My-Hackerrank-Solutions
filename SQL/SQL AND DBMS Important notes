A file with . sql extension is a Structured Query Language (SQL) file.
ACID -> 
CRUD (Create, Read, Update, and Delete)
-- is used to comment SQL queries.

Query all attributes => Query all columns => SELECT * FROM db_name.table_name;

You can rename a table or a column in a database temporarily by giving them another pseudo name. This pseudo name is known as Alias. 
The use of aliases is to address a specific table or a column in an SQL statement without changing their original name in the database. Aliases are created with the AS keyword.


/* NESTING SELECT QUERIES */
SELECT ROUND(LONG_W,4) FROM STATION WHERE LAT_N=(SELECT MAX(LAT_N) FROM STATION WHERE  LAT_N<137.2345);
//Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 4 decimal places.



SOME SYNTAX COMMANDS:

SELECT DISTINCT(column_name) FROM table_name;

/* SQL WHERE function */
SELECT * FROM CUSTOMERS WHERE NAME = 'Ramesh';
SELECT * from CUSTOMERS WHERE NAME IN ('Khilan', 'Hardik', 'Muffy');    //WHERE Clause with IN Operator
SELECT * from CUSTOMERS WHERE AGE NOT IN (25, 23, 22);    //WHERE Clause with NOT IN Operator
SELECT * FROM CUSTOMERS WHERE NAME LIKE 'K___%';    //WHERE Clause with LIKE Operator => Syntax: WHERE column_name LIKE pattern; => The WHERE clause with LIKE operator allows us to filter rows that matches a specific pattern. This specific pattern is represented by wildcards (such as %, _, [] etc).
//the query would display all the records where the name starts with K and is at least 4 characters in length

SELECT * FROM CUSTOMERS WHERE (AGE = 25 OR salary < 4500) AND (name = 'Komal' OR name = 'Kaushik');    //WHERE Clause with AND, OR Operators



/* SQL SUM() function */
Syntax:
SELECT SUM(column_name) as give_a_new_table_name_to_this_sum FROM table_name;

SELECT SUM(SALARY) as summation from CUSTOMERS;
Output
+-----------+
| summation |
+-----------+
| 35000.00  |
+-----------+

Now, suppose based on the above table we want to calculate the summation of distinct (unique) age of the customers
SELECT SUM(DISTINCT AGE) as summation from CUSTOMERS;

SELECT SUM(Salary) AS summation FROM CUSTOMERS WHERE AGE > 24;    //the summation of the salary of all customers whose age is greater than 24


SELECT AGE, SUM(SALARY) as sal_sum from CUSTOMERS GROUP BY AGE HAVING SUM(SALARY)> 5000;
//query returns the age of all the customers having salary greater than 5000. Since there are two customers with same age, one of whose salary is greater than 5000, so their salary is summed up


/* SQL ROUND() function */
Syntax: SELECT ROUND(column_name, your_scale) FROM table_name;    //your_scale->desired scale for rounding

QUERY-> following two values from the STATION table: The sum of all values in LAT_N rounded to a scale of 2 decimal places. The sum of all values in LONG_W rounded to a scale of 2 decimal places.
SELECT 
ROUND(SUM(LAT_N),2) as lat, 
ROUND(SUM(LONG_W),2) as lon 
FROM STATION;

Note : if you want to round to nearest integer just make the scale 0.



/* SQL - COUNT Function */
Syntax: SELECT COUNT(column_name) FROM table_name;     //ounting the number of records

SELECT COUNT(*) FROM employee_tbl ;
+----------+
| COUNT(*) |
+----------+
|        7 |
+----------+

SELECT (COUNT(CITY) - COUNT(DISTINCT(CITY))) FROM STATION;  // difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table. 



/* SQL - ORDER BY Clause */
syntax - SELECT column_name FROM table_name ORDER BY table_name ASC/DSC;    //SQL ORDER BY clause is used to sort the data in either ascending or descending order

Note: WHERE function if you are using any condition comes before order by.
Logic--- firs tyou find the column data using condtion, then only you sort all of them

/* SQL - MAX Function */
Syntax: SELECT MAX(column_name) -> FROM table_name;


/* SQL LENGTH FUNCTION */
Syntax: SELECT LENGTH(column_name) as new_clumn_name_you_want FROM table_name;
SELECT LENGTH(CITY) as city_length FROM STATION;    //print length of all the data in that column works for all data types

/* SQL - SUBSTRING() Function */
SELECT SUBSTRING('Hello World', 2, 5) AS NEW_STRING;
+------------+
| NEW_STRING |
+------------+
| ello       |
+------------+

/* SQL - CONCAT Function */
Syntax: CONCAT(string1, string2, ...., string_n)
SELECT CONCAT('SQL', ' ', 'is', ' ', 'fun!'); 



/* SQL Server LEFT() Function */
The LEFT() function extracts a number of characters from a string (starting from left).
LEFT(string, number_of_chars)

Extract 5 characters from the text in the "CustomerName" column (starting from left):
SELECT LEFT(CustomerName, 5) AS ExtractString
FROM Customers; 


/* SQL REPLACE() Function */
The REPLACE() function replaces all occurrences of a substring within a string, with a new substring.
Syntax: REPLACE(string, old_string, new_string)
SELECT REPLACE('SQL Tutorial', 'SQL', 'HTML'); 


/* SQL - Group By Clause */
to arrange identical data into groups
SELECT AGE, COUNT(Name) FROM CUSTOMERS GROUP BY AGE;


/* The SQL HAVING Clause */
The SQL HAVING clause is similar to the WHERE clause; both are used to filter rows in a table based on specified criteria. 
However, the HAVING clause is used to filter grouped rows instead of single rows. 
These rows are grouped together by the GROUP BY clause, so, the HAVING clause must always be followed by the GROUP BY clause.

Here's the order positioning:
SELECT
FROM
WHERE
GROUP BY
HAVING
ORDER BY

SELECT ADDRESS, AGE, MIN(SALARY) AS MIN_SUM FROM CUSTOMERS GROUP BY ADDRESS, AGE HAVING AGE > 25;
//we are grouping the records of the CUSTOMERS table based on the columns ADDRESS and AGE and filtering the groups where the AGE value is less than 25.



/* SQL CASE Statement */
The CASE statement works like a simplified IF-THEN-ELSE statement
Syntax: 
CASE
   WHEN condition1 THEN statement1,
   WHEN condition2 THEN statement2,
   WHEN condition THEN statementN
   ELSE result
END;


SELECT NAME, AGE,
CASE 
WHEN AGE > 30 THEN 'Gen X'
WHEN AGE > 25 THEN 'Gen Y'
WHEN AGE > 22 THEN 'Gen Z'
ELSE 'Gen Alpha' 
END AS Generation
FROM CUSTOMERS;

The output produced is as follows −
NAME 	AGE 	Generation
Ramesh 	32 	    Gen X
Khilan 	25 	    Gen Z
Hardik 	27 	    Gen Y
Komal 	22 	    Gen Alpha

/* SQL - BETWEEN Operator */
SELECT * FROM CUSTOMERS WHERE AGE BETWEEN 20 AND 25;
SELECT * FROM CUSTOMERS WHERE NAME BETWEEN 'A' AND 'L'; 



/* The SQL UNION Operator */
The SQL UNION operator is used to combine data from multiple tables by eliminating duplicate rows (if any).
To use the UNION operator on multiple tables, all these tables must be union compatible. And they are said to be union compatible if and only if they meet the following criteria −
    The same number of columns selected with the same datatype.
    These columns must also be in the same order.
    They need not have same number of rows.
Syntax:
SELECT column1 , column2
FROM table1  
[WHERE condition]
UNION
SELECT column1, column2 
FROM table2
[WHERE condition];

SELECT ID, SALARY FROM CUSTOMERS WHERE ID > 5
UNION
SELECT CUSTOMER_ID, AMOUNT FROM ORDERS WHERE CUSTOMER_ID > 2;
// In the following query, we are retrieving the id's of the customers where id is greater than 5 and 2 from the 'CUSTOMERS' and 'ORDERS' tables respectively 


What is the difference Between UNION and UNION ALL?
UNION ALL is also an operator/clause in SQL, that is used to combine multiple tables into one table. However, this operator also preserves the duplicate rows in the resultant tables unlike UNION.
eg: As we can see in the tables above, Kohli played 234 matches internationally and 234 matches nationally. Even though the data in these columns is the same, they are all separate matches. 
There is a need to include both rows in the resultant table displaying the total matches played by a player. So, we use the UNION ALL operator in such cases.
Syntax: SELECT * FROM table1
UNION ALL
SELECT * FROM table2;

Hence,
UNION and UNION ALL are both SQL set operations that combine the result sets of two or more SELECT statements. However, there is a key difference between them:
UNION:
Removes duplicate rows from the combined result set.
Only distinct (unique) rows are included in the final result.
UNION ALL:
Retains all rows from the combined result set, including duplicates.
Does not eliminate duplicate rows, resulting in potentially faster performance compared to UNION.


/* The SQL INTERSECT Operator */
SELECT NAME, AGE, HOBBY FROM STUDENTS_HOBBY
INTERSECT 
SELECT NAME, AGE, HOBBY FROM STUDENTS;

/* The SQL EXCEPT Operator */
The EXCEPT operator in SQL is used to retrieve all the unique records from the left operand (query), except the records that are present in the result set of the right operand (query).
Its opposite of intersect something like A-B.








/* SQL CODE - FOR TYPE OF TRIANGLE */
SELECT
    CASE
        WHEN A+B<=C OR A+C<=B OR B+C<=A THEN 'Not A Triangle'
        WHEN A=B AND B=C AND C=A THEN 'Equilateral'
        WHEN A=B OR B=C OR A=C THEN 'Isosceles'
        ELSE 'Scalene'
    END
as triangle_type
FROM TRIANGLES;


/* TOP EARNERS */
SELECT MAX(SALARY * MONTHS), COUNT(NAME) FROM EMPLOYEE WHERE SALARY * MONTHS = (SELECT MAX(SALARY * MONTHS) FROM EMPLOYEE);
//Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings.


/* Give the output of full Name (Given First name and Surname) with some condition. */
SELECT CONCAT(first_name, ' ', surname) AS full_name
FROM users
WHERE /* Your condition goes here */;

/* remove duplicate rows from a table without a Distinct Keyword */

