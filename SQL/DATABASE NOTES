In SQL, a **join** is used to combine rows from two or more tables based on a related column between them. Joins are a fundamental part of SQL queries and enable you to retrieve data that is spread across multiple tables. Here are the main types of joins:

### 1. Inner Join
An **inner join** returns rows when there is a match in both tables being joined. It excludes rows that do not have a matching entry in the other table.

#### Syntax
```sql
SELECT columns
FROM table1
INNER JOIN table2
ON table1.column = table2.column;
```

#### Example
Suppose we have two tables, `Students` and `Enrollments`:

**Students Table**
| StudentID | StudentName |
|-----------|-------------|
| 1         | Alice       |
| 2         | Bob         |

**Enrollments Table**
| StudentID | CourseID |
|-----------|----------|
| 1         | 101      |
| 3         | 102      |

An inner join would return:

```plaintext
SELECT Students.StudentID, Students.StudentName, Enrollments.CourseID
FROM Students
INNER JOIN Enrollments
ON Students.StudentID = Enrollments.StudentID;
```

**Result**
| StudentID | StudentName | CourseID |
|-----------|-------------|----------|
| 1         | Alice       | 101      |

### 2. Left Join (or Left Outer Join)
A **left join** returns all rows from the left table and the matched rows from the right table. If no match is found, NULL values are returned for columns from the right table.

#### Syntax
```sql
SELECT columns
FROM table1
LEFT JOIN table2
ON table1.column = table2.column;
```

#### Example
Using the same tables as above:

```plaintext
SELECT Students.StudentID, Students.StudentName, Enrollments.CourseID
FROM Students
LEFT JOIN Enrollments
ON Students.StudentID = Enrollments.StudentID;
```

**Result**
| StudentID | StudentName | CourseID |
|-----------|-------------|----------|
| 1         | Alice       | 101      |
| 2         | Bob         | NULL     |

### 3. Right Join (or Right Outer Join)
A **right join** returns all rows from the right table and the matched rows from the left table. If no match is found, NULL values are returned for columns from the left table.

#### Syntax
```sql
SELECT columns
FROM table1
RIGHT JOIN table2
ON table1.column = table2.column;
```

#### Example
Using the same tables as above:

```plaintext
SELECT Students.StudentID, Students.StudentName, Enrollments.CourseID
FROM Students
RIGHT JOIN Enrollments
ON Students.StudentID = Enrollments.StudentID;
```

**Result**
| StudentID | StudentName | CourseID |
|-----------|-------------|----------|
| 1         | Alice       | 101      |
| NULL      | NULL        | 102      |

### 4. Full Join (or Full Outer Join)
A **full join** returns all rows from both tables. Where there is no match, NULL values are returned for columns from the table without a match.

#### Syntax
```sql
SELECT columns
FROM table1
FULL OUTER JOIN table2
ON table1.column = table2.column;
```

#### Example
Using the same tables as above:

```plaintext
SELECT Students.StudentID, Students.StudentName, Enrollments.CourseID
FROM Students
FULL OUTER JOIN Enrollments
ON Students.StudentID = Enrollments.StudentID;
```

**Result**
| StudentID | StudentName | CourseID |
|-----------|-------------|----------|
| 1         | Alice       | 101      |
| 2         | Bob         | NULL     |
| NULL      | NULL        | 102      |

### 5. Cross Join
A **cross join** returns the Cartesian product of the two tables, meaning it returns all possible combinations of rows from both tables.

#### Syntax
```sql
SELECT columns
FROM table1
CROSS JOIN table2;
```

#### Example
Using the same tables as above:

```plaintext
SELECT Students.StudentID, Students.StudentName, Enrollments.CourseID
FROM Students
CROSS JOIN Enrollments;
```

**Result**
| StudentID | StudentName | CourseID |
|-----------|-------------|----------|
| 1         | Alice       | 101      |
| 1         | Alice       | 102      |
| 2         | Bob         | 101      |
| 2         | Bob         | 102      |

### 6. Self Join
A **self join** is a join of a table with itself. It can be useful for comparing rows within the same table.

#### Syntax
```sql
SELECT a.column, b.column
FROM table a, table b
WHERE condition;
```

#### Example
Suppose we have a `Employees` table with columns `EmployeeID`, `EmployeeName`, and `ManagerID`:

**Employees Table**
| EmployeeID | EmployeeName | ManagerID |
|------------|--------------|-----------|
| 1          | Alice        | NULL      |
| 2          | Bob          | 1         |
| 3          | Carol        | 1         |

To find out which employees report to which managers:

```plaintext
SELECT a.EmployeeName AS Employee, b.EmployeeName AS Manager
FROM Employees a
LEFT JOIN Employees b
ON a.ManagerID = b.EmployeeID;
```

**Result**
| Employee | Manager |
|----------|---------|
| Alice    | NULL    |
| Bob      | Alice   |
| Carol    | Alice   |

Each type of join serves a specific purpose and is useful in different scenarios depending on the relationships and data you need to retrieve from your database.








Normalization is typically achieved through a series of stages known as "normal forms," each with its own rules and objectives. Here's an overview of the first three normal forms, which are the most commonly used:
First Normal Form (1NF)

    Objective: Ensure that each column in a table contains atomic, indivisible values, and each column contains values of a single data type.
    Rules:
        Each table cell must contain a single value (no repeating groups or arrays).
        Each record must be unique, which is typically enforced by a primary key.

Second Normal Form (2NF)

    Objective: Remove partial dependencies on a composite primary key.
    Rules:
        The table must be in 1NF.
        All non-key attributes must be fully functionally dependent on the entire primary key (not just part of it).

Third Normal Form (3NF)

    Objective: Eliminate transitive dependencies to ensure that non-key attributes depend only on the primary key.
    Rules:
        The table must be in 2NF.
        There should be no transitive dependency, meaning that non-key attributes should not depend on other non-key attributes.

Benefits of Normalization

    Reduces Data Redundancy: By storing each piece of data only once, normalization minimizes the chance of inconsistent data.
    Improves Data Integrity: Enforcing data dependencies helps maintain accuracy and consistency.
    Facilitates Data Maintenance: Updating or deleting data is more straightforward when it is stored in a structured manner.
    Optimizes Storage: Reducing redundancy saves storage space.

Example

Consider a table storing student enrollment information:
StudentID	StudentName	CourseID	CourseName	Instructor
1	Alice	101	Math	Prof. Smith
2	Bob	102	Science	Prof. Jones
1	Alice	102	Science	Prof. Jones

    1NF: Ensure each field contains only atomic values, and the table has a unique identifier.
    2NF: Separate the table into two tables, one for students and one for courses, to remove partial dependencies.
    3NF: Create an additional table for instructors to remove transitive dependencies between courses and instructors.

After normalization:

Students Table
StudentID	StudentName
1	Alice
2	Bob

Courses Table
CourseID	CourseName	InstructorID
101	Math	1
102	Science	2

Instructors Table
InstructorID	InstructorName
1	Prof. Smith
2	Prof. Jones

This structure reduces redundancy and makes the data easier to manage.
